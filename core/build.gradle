import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'aar'
apply plugin: 'maven'

dependencies {
    implementation name: "android"

    implementationAar "androidx.legacy:legacy-support-v4:${v4legacyVersion}"
    implementationAar "com.google.android.support:wearable:${wearVersion}"  
}

task createPom {
    pom {
       project {
           groupId "org.p5android"
           artifactId "processing-core"
           version "${modeVersion}"
           packaging "jar"
           licenses {
               license {
                   name "GNU Lesser General Public License, version 2.1"
                   url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                   distribution "repo"
               }
           }
           dependencies {
               dependency {
                   groupId "androidx.legacy"
                   artifactId "legacy-support-v4"
                   version "${v4legacyVersion}"
                   scope "implementation"
               }
               dependency {
                   groupId "com.google.android.support"
                   artifactId "wearable"
                   version "${wearVersion}"
                   scope "implementation"
               }               
           }
        }
    }.writeTo("dist/processing-core-${modeVersion}.pom")
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["src/"]
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "${coreZipPath}"
}

compileJava.doFirst {
    String[] deps = ["wearable.jar"]                    
    for (String fn : deps) {
        Files.copy(file("${rootDir}/build/libs/" + fn).toPath(),
                   file("${rootDir}/mode/mode/" + fn).toPath(), REPLACE_EXISTING)
    }
}

build.doLast {
    // Copying core jar as zip inside the mode folder
    Files.copy(file("${buildDir}/libs/core.jar").toPath(),
               file("${coreZipPath}").toPath(), REPLACE_EXISTING)

    // Copying the files for release on JCentral
    File distFolder = file("dist")
    distFolder.mkdirs()
    Files.copy(file("${buildDir}/libs/core.jar").toPath(),
               file("dist/processing-core-${modeVersion}.jar").toPath(), REPLACE_EXISTING)
    Files.copy(file("${buildDir}/libs/core-sources.jar").toPath(),
               file("dist/processing-core-${modeVersion}-sources.jar").toPath(), REPLACE_EXISTING)
    Files.copy(file("${buildDir}/libs/core.jar.MD5").toPath(),
               file("dist/processing-core-${modeVersion}.jar.md5").toPath(), REPLACE_EXISTING)
}