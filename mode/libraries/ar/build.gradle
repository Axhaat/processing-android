import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

apply plugin: 'aar'
apply plugin: 'maven-publish'

dependencies {
    compileOnly name: "android"
    compileOnly "org.p5android:processing-core:${modeVersion}"
    implementationAar "com.google.ar:core:${garVersion}"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

publishing {
    publications {
        arPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            pom {
                groupId = "org.p5android"
                artifactId = "processing-ar"
                version = "${arLibVersion}"
                packaging = "jar"
                // description = "Processing Android Core"
                // url = "http://www.example.com/project"
                licenses {
                    license {
                        name = "GNU Lesser General Public License, version 2.1"
                        url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                        distribution = "repo"
                    }
                }
            }

            pom.withXml {
                // inserting the dependencies node
                def dependenciesNode = asNode().appendNode('dependencies')
                // start adding dependency nodes inside dependencies node
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', 'org.p5android')
                dependencyNode.appendNode('artifactId', 'processing-core')
                dependencyNode.appendNode('version', '4.2.0')
                dependencyNode.appendNode('scope', 'implementation')

                def dependencyNode2 = dependenciesNode.appendNode('dependency')
                dependencyNode2.appendNode('groupId', 'com.google.ar')
                dependencyNode2.appendNode('artifactId', 'core')
                dependencyNode2.appendNode('version', '1.22.0')
                dependencyNode2.appendNode('scope', 'implementation')
            }


        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["src/"]
        }        
    }
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourceJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "library/ar.jar"
}

compileJava.doFirst {
    String[] deps = ["core.jar"]
    File libFolder = file("library")
    libFolder.mkdirs()
    for (String fn : deps) {
        Files.copy(file("${rootDir}/build/libs/" + fn).toPath(),
                   file("library/" + fn).toPath(), REPLACE_EXISTING);
    }
}

build.doLast {
    // If xml doesn't exist
    def pomfile = file("${buildDir}/publications/arPublication/pom-default.xml")
    if (!pomfile.exists()) {
        println("**********************************************************************************************\n" +
                "*                                                                                            *\n" +
                "*   File not found: root/mode/libraries/ar/build/publications/arPublication/pom-default.xml  *\n" +
                "*   First execute the following command to generate the file:                                *\n" +
                "*   gradle generatePomFileForarPublicationPublication                                        *\n" +
                "*                                                                                            *\n" +
                "**********************************************************************************************"
        )
    }
    // Copying ar jar to library folder
    File arJar = file("library/ar.jar")
    arJar.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               arJar.toPath(), REPLACE_EXISTING);
    // Copying the files for release on JCentral
    File distFolder = file("dist");
    distFolder.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar-sources.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}-sources.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar.jar.MD5").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar.md5").toPath(), REPLACE_EXISTING);
    Files.copy(file("${buildDir}/publications/arPublication/pom-default.xml").toPath(),
            file("dist/processing-ar-${arLibVersion}.pom").toPath(), REPLACE_EXISTING)
}
