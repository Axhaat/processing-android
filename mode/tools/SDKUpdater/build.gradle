import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

configurations {
    implementation.extendsFrom implementationCopy
}

dependencies {
    // implementation group: "org.processing", name: "pde", version: "${processingVersion}"
    // implementation group: "org.processing", name: "java-mode", version: "${processingVersion}"
    implementation fileTree(include: ["AndroidMode.jar", "pde.jar", "JavaMode.jar"], dir: '../../mode')

    implementationCopy group: "com.android.tools", name: "sdklib", version: "${toolsLibVersion}"
    implementationCopy group: "com.android.tools", name: "repository", version: "${toolsLibVersion}"
    implementationCopy group: "com.android.tools", name: "common", version: "${toolsLibVersion}"
}

// This task copies the gradle tooling jar into the mode folder
task copyToLib(type: Copy) {
  from configurations.implementationCopy.files {
        include '**/*.jar'
        exclude '**/annotations-*'
        exclude '**/checker-qual-*.jar'
        exclude '**/httpclient-*.jar'
        exclude '**/layoutlib-api-*.jar'
        exclude '**/commons-codec*.jar'
        exclude '**/commons-logging*.jar'
        exclude '**/dvlib-*.jar'
        exclude '**/error_prone_annotations-*.jar'
        exclude '**/failureaccess-*.jar'
        exclude '**/FastInfoset-*.jar'
        exclude '**/gson-*.jar'
        exclude '**/httpmime-*.jar'
        exclude '**/j2objc-*.jar'
        exclude '**/javax.activation-*.jar'
        exclude '**/jimfs-*.jar'
        exclude '**/jna-*.jar'
        exclude 'jsr305*jar'
        exclude '**/kotlin-stdlib-c*.jar'
        exclude '**/kotlin-stdlib-jdk7*.jar'
        exclude '**/kotlin-stdlib-jdk8*.jar'
        exclude '**/kxml2-*jar'
        exclude '**/listenablefuture-*jar'
        exclude '**/stax-*jar'
        exclude '**/txw2*jar'

      // uncommenting the following and commenting out the above statements work the same way
      // better to mention both the included and excluded jars to keep a track

//          include '**/common-*jar'
//          include '**/commons-compress-*jar'
//          include '**/guava-*jar'
//          include '**/httpcore-*jar'
//          include '**/istack-*jar'
//          include '**/jakarta.activation-api-*jar'
//          include '**/jakarta.xml.bind-api-*jar'
//          include '**/jaxb-runtime-*jar'
//          include '**/kotlin-stdlib-1*jar'
//          include '**/shared-*jar'
//          include '**/protos-*jar'
//          include '**/protob*jar'
//          include '**/sdklib-*jar'
//          include '**/repository-*jar'


  }
  into "lib"
}
build.dependsOn(copyToLib)
compileJava.dependsOn(':mode:copyToLib')

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        } 
    }
}

clean.doFirst {
    delete "tool"
    delete "lib"
}

build.doLast {
    // Copy jar file to tool folder
    File toolJar = file("tool/SDKUpdater.jar");
    toolJar.mkdirs();
    Files.copy(file("$buildDir/libs/SDKUpdater.jar").toPath(),
               toolJar.toPath(), REPLACE_EXISTING);                   
}
